version '1.0-SNAPSHOT'
ext {
    initSnapshotVersion = '1.0.0-SNAPSHOT'
    istarwyhInitialVersion = '0.2.9'
    jakartaInjectVersion = '2.0.1'
    junitVersion = '5.9.2'
    junitPlatformVersion = '1.0.0'
    lombokVersion = '1.18.30'
    slf4jVersion = '1.7.36'
    logbackClassicVersion = '1.4.14'
    jetbrainsAnnotationVersion = '24.0.1'
    javassistVersion = '3.29.2-GA'
    mockitoJunit5Version = '5.11.0'
    olderMockitoJunit5Version = '4.11.0'
    fastjson2Version = '2.0.25'
    guavaVersion = '33.0.0-jre'
    mapstructVersion = '1.5.3.Final'
    apacheCommonsLang3Version = '3.13.0'
    easyRandomVersion = '5.0.0'
    olderEasyRandomVersion = '4.3.0'

}

allprojects {
    group 'istarwyh'

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repo.huaweicloud.com/repository/maven" }
        mavenCentral()
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    }


// 使用 plugins.withType(JavaPlugin) 来确保只有应用了 Java 插件的项目才会应用这个配置
// IDE 的静态分析器并不总是能够完全理解这些动态添加的由java 插件提供的 DSL 扩展。
// 它们主要基于 Gradle 核心 API 和标准 Groovy 语法进行分析。所以IDE会提示 "No candidates found"
    plugins.withType(JavaPlugin).configureEach {
        java {
            toolchain {
                languageVersion = JavaLanguageVersion.of(21)
            }
        }

        test {
            useJUnitPlatform()
        }

        dependencies {
            /**************************************************  SRC  ************************************************************/
            compileOnly(
                    "org.projectlombok:lombok:${lombokVersion}"
            )

            implementation(
                    // 	logback-classic includes logback-core , slf4j-api
                    "org.jetbrains:annotations:${jetbrainsAnnotationVersion}",
                    "ch.qos.logback:logback-classic:${logbackClassicVersion}",
                    "com.alibaba.fastjson2:fastjson2:${fastjson2Version}",
                    "com.google.guava:guava:${guavaVersion}",
                    "org.mapstruct:mapstruct:${mapstructVersion}",
                    "org.apache.commons:commons-lang3:${apacheCommonsLang3Version}"
            )

            annotationProcessor(
                    "org.projectlombok:lombok:${lombokVersion}",
                    "org.mapstruct:mapstruct-processor:${mapstructVersion}"
            )

            /**************************************************  TEST  ************************************************************/
            testCompileOnly(
                    "org.projectlombok:lombok:${lombokVersion}"
            )

            testImplementation(
                    // JUnit Jupiter API and TestEngine and ParameterizedTest
                    "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                    "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
                    "org.junit.vintage:junit-vintage-engine:${junitVersion}",
                    "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
                    "org.mockito:mockito-junit-jupiter:${mockitoJunit5Version}",

                    "ch.qos.logback:logback-classic:${logbackClassicVersion}",
                    "org.javassist:javassist:${javassistVersion}",
                    "org.apache.commons:commons-lang3:${apacheCommonsLang3Version}",
                    "org.mapstruct:mapstruct:${mapstructVersion}"
            )

            testAnnotationProcessor(
                    "org.projectlombok:lombok:${lombokVersion}",
                    "org.mapstruct:mapstruct-processor:${mapstructVersion}"
            )
        }
    }

    configurations {
        implementation {
            dependencies.configureEach { dep ->
                if (dep.getGroup() == 'com.github.istarwyh' && dep.getName() == 'Initial') {
                    dep.transitive = false
                }
            }

            dependencies.configureEach { dep ->
                if (dep.getGroup() == 'io.github.istarwyh' && dep.getName() == 'junit-extensions') {
                    dep.transitive = false
                }
            }
        }
    }

    defaultTasks 'clean', 'build', 'test'

}

subprojects {

}


